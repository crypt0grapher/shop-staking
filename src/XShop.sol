// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

//import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "lib/openzeppelin-contracts/contracts/access/Ownable.sol";
import "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol";
import "lib/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "./IXShop.sol";

/// @title Shop Bot Staking Contract
/// @notice This contract allow users to stake SHOP tokens and earn rewards from the fees generated by the platform

contract XShop is IXShop, ERC20("Staked Shop Bot", "xSHOP"), Ownable, ReentrancyGuard {

    IERC20 public constant shopToken = IERC20(0x99e186E8671DB8B10d45B7A1C430952a9FBE0D40);
    IUniswapV2Router02 public constant uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

    uint256 public constant epochDuration = 1 days;

    uint256 public minimumStake = 20000 * 1e18;
    // Staking time lock, 5 days by default
    uint256 public timeLock = 5 days;
    // Total rewards injected
    uint256 public totalRewards;

    // Snapshot of the epoch, generated by the snapshot(), used to calculate rewards
    struct EpochInfo {
        // Snapshot time
        uint256 timestamp;
        // Rewards injected
        uint256 rewards;
        // Total deposited snap
        uint256 supply;
        // $SHOP swapped for rewards for re-investors
        uint256 shop;
    }

    uint256 public currentEpoch;
    mapping(uint256 => EpochInfo) public epochInfo;

    // User info, there's also a balance of xSHOP on the ERC20 super contract
    struct UserInfo {
        //epoch => total amount deposited during the epoch
        mapping(uint256 => uint256) depositedInEpoch;
        mapping(uint256 => bool) isReinvestingOnForEpoch;
        // a starting epoch for reward calculation for user - either last claimed or first deposit
        uint256 lastClaimedEpoch;
        uint256 lastEpochReinvested;
    }

    mapping(address => UserInfo) public userInfo;

    // That's for enumerating re-investors because we have to iterate over them to buy SHOP for rewards generated
    uint256 public reInvestorsCount;
    mapping(address => uint256) public reInvestorsIndex;
    mapping(uint256 => address) public reInvestors;

    // ========== Configuration ==========
    constructor() ReentrancyGuard()  {
    }

    function setMinimumStake(uint256 _minimumStake) public onlyOwner {
        minimumStake = _minimumStake;
    }

    function setTimeLock(uint256 _timeLock) public onlyOwner {
        timeLock = _timeLock;
    }

    // ========== State changing ==========

    function deposit(uint256 _amount) public nonReentrant {
        require(_amount + balanceOf(msg.sender) >= minimumStake, "Minimum deposit is 20K $SHOP");
        require(shopToken.transferFrom(msg.sender, address(this), _amount), "Transfer failed");

        _updateStake(msg.sender, _amount, true);

        emit Deposited(msg.sender, _amount);
    }

    function withdraw(uint256 _amount) public nonReentrant {
        require(balanceOf(msg.sender) >= _amount, "Insufficient balance");

        _updateStake(msg.sender, _amount, false);

        require(shopToken.transfer(msg.sender, _amount), "Transfer failed");

        emit Withdrawn(msg.sender, _amount);
    }

    function claimReward() public nonReentrant {
        require(currentEpoch > 0, "No rewards have been distributed yet");
        uint256 lastSnapshotTime = epochInfo[currentEpoch - 1].timestamp;
        require(lastSnapshotTime + epochDuration < block.timestamp, "Too early to calculate rewards");
        require(!isReinvesting(), "Auto-compounding is enabled");

        uint256 reward = getPendingReward();
        require(reward > 0, "No reward available");

        userInfo[msg.sender].lastClaimedEpoch = currentEpoch;
        payable(msg.sender).transfer(reward);

        emit Claimed(msg.sender, reward);
    }

    function snapshot() public payable nonReentrant {
        uint256 lastSnapshotTime = epochInfo[currentEpoch - 1].timestamp;
        require(block.timestamp >= lastSnapshotTime + epochDuration - 5 minutes, "Too early for a new snapshot");
        require(msg.value > 0, "ETH amount must be greater than 0");
        totalRewards += msg.value;

        epochInfo[currentEpoch].rewards = msg.value;
        epochInfo[currentEpoch].timestamp = block.timestamp;
        epochInfo[currentEpoch].supply = totalSupply();
        // swap ETH for autocompounding

        uint256 ethToSell = 0;
        for (uint256 i = 1; i <= reInvestorsCount; i++) {
            ethToSell += _calculateReward(reInvestors[i], userInfo[(reInvestors[i])].lastEpochReinvested, true);
            if (ethToSell > 0) {
                userInfo[reInvestors[i]].lastEpochReinvested = currentEpoch;
            }
        }
        uint256 xShopToMintTotal = _swapEthForShop(ethToSell);
        epochInfo[currentEpoch].shop = xShopToMintTotal;

        currentEpoch++;
        emit Snapshot(msg.value, msg.sender, xShopToMintTotal);
    }


    function toggleReinvesting() public {
        bool currentStatus = reInvestorsIndex[msg.sender] > 0;
        if (!currentStatus) {
            // Add re-investor to the renumeration
            if (reInvestorsIndex[msg.sender] == 0) {
                reInvestorsCount++;
                reInvestorsIndex[msg.sender] = reInvestorsCount;
                reInvestors[reInvestorsCount] = msg.sender;
                userInfo[msg.sender].isReinvestingOnForEpoch[currentEpoch] = true;
            }
        }
        else {
            // Remove re-investor from the renumeration
            if (reInvestorsIndex[msg.sender] != 0) {
                uint256 index = reInvestorsIndex[msg.sender];
                address lastReinvestor = reInvestors[reInvestorsCount];

                // Swap the msg.sender to remove with the last msg.sender
                reInvestors[index] = lastReinvestor;
                reInvestorsIndex[lastReinvestor] = index;

                // Remove the last msg.sender and update count
                delete reInvestors[reInvestorsCount];
                delete reInvestorsIndex[msg.sender];
                reInvestorsCount--;
                userInfo[msg.sender].isReinvestingOnForEpoch[currentEpoch] = false;
            }
        }
        emit ReinvestingToggled(msg.sender, !currentStatus);
    }


    function rescueETH(uint256 _weiAmount) external {
        payable(owner()).transfer(_weiAmount);
    }

    function rescueERC20(address _tokenAdd, uint256 _amount) external {
        IERC20(_tokenAdd).transfer(owner(), _amount);
    }

    // ========== View functions ==========

    function getPendingReward() public view returns (uint256) {
        return calculateRewardForUser(msg.sender);
    }

    function calculateRewardForUser(address user) public view returns (uint256) {
        return _calculateReward(user, userInfo[user].lastClaimedEpoch, false);
    }

    function isReinvesting() public view returns (bool) {
        return reInvestorsIndex[msg.sender] > 0;
    }

    // ========== Internal functions ==========

    function _updateStake(address _user, uint256 _amount, bool _isDeposit) internal {
        if (_isDeposit) {
            userInfo[_user].depositedInEpoch[currentEpoch] += _amount;
            _mint(_user, _amount);
        } else {
            uint256 remainingAmountToWithdraw = _amount;
            for (uint256 i = 0; i <= currentEpoch; i++) {
                if (remainingAmountToWithdraw == 0) {
                    break;
                }
                uint256 amountToWithdraw = userInfo[_user].depositedInEpoch[i];
                if (amountToWithdraw > remainingAmountToWithdraw) {
                    amountToWithdraw = remainingAmountToWithdraw;
                }
                userInfo[_user].depositedInEpoch[i] -= amountToWithdraw;
                remainingAmountToWithdraw -= amountToWithdraw;
            }
            _burn(_user, _amount);
        }
    }


    function _swapEthForShop(uint256 _ethAmount) internal returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = uniswapRouter.WETH();
        path[1] = address(shopToken);

        // 15 seeconds from the current block time
        uint256 deadline = block.timestamp + 15;

        // Swap and return the amount of SHOP tokens received
        uint[] memory amounts = uniswapRouter.swapExactETHForTokens{value: _ethAmount}(
            0, // Accept any amount of SHOP
            path,
            address(this),
            deadline
        );

        // Return the amount of SHOP tokens received
        return amounts[1];
    }

// Mock function for demonstration purposes. In reality, you'd interact with a decentralized exchange contract here.
    function _calculateReward(address _user, uint256 _lastEpoch, bool _isForReinvestment) internal view returns (uint256) {
        uint256 reward = 0;
        if (currentEpoch == 0) {
            return 0;
        }

        uint256 userBalanceInEpoch = balanceOf(_user);

        for (uint256 i = currentEpoch - 1; i >= _lastEpoch; i--) {
            userBalanceInEpoch -= userInfo[_user].depositedInEpoch[i];
            uint256 epochReward = userBalanceInEpoch * epochInfo[i].rewards / epochInfo[i].supply;

            if (_isForReinvestment && reInvestorsIndex[_user] > 0) {
                reward += epochReward;
            } else if (!_isForReinvestment && reInvestorsIndex[_user] == 0) {
                reward += epochReward;
            }
        }

        return reward;
    }

    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {
        super._beforeTokenTransfer(_from, _to, _amount);
        require(_from == address(0) || _to == address(0), "Only stake or unstake");
    }


}
