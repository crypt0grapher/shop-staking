// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

//import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "lib/openzeppelin-contracts/contracts/access/Ownable.sol";
import "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol";

/// @title A shop staking contract
/// @author crypt0grapher
/// @notice this contract stakes SHOP tokens and allows users to earn rewards from the fees generated by the platform

contract XSHOP is ERC20, Ownable, ReentrancyGuard {
    event Snapshot(uint256 rewards, address indexed from, uint256 shopPrice);
    event Deposited(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event Claimed(address indexed user, uint256 reward);

    IERC20 public constant shopToken = IERC20(0x99e186E8671DB8B10d45B7A1C430952a9FBE0D40);

    uint256 public minimumStake = 20000 * 10e18;
    uint256 public timeLock = 5 days;

    uint256 public epochDuration = 1 days;
    uint256 public rewardPool;

    struct EpochInfo {
        uint256 timestamp;
        uint256 rewards;
        uint256 totalStaked;
        uint256 shopPrice;
    }

    uint256 public currentEpoch;
    mapping(uint256 => EpochInfo) public epochInfo;

    struct UserInfo {
        //epoch => total amount deposited during the epoch
        mapping(uint256 => uint256) depositedInEpoch;
        mapping(uint256 => bool) isAutoCompoundingOn;
        // a starting epoch for reward calculation for user - either last claimed or first deposit
        uint256 lastClaimedEpoch;
        uint256 lastClaimedInEpoch;
    }
    mapping(address => UserInfo) public userInfo;


    constructor() ReentrancyGuard() Ownable() ERC20("Staked SHOP", "xSHOP") {
    }

    function setMinimumStake(uint256 _minimumStake) public onlyOwner {
        minimumStake = _minimumStake;
    }

    function setTimeLock(uint256 _timeLock) public onlyOwner {
        timeLock = _timeLock;
    }

    function setAutoCompounding(bool _status) public {
        isAutoCompounding[msg.sender] = _status;
    }

    function deposit(uint256 amount) public {
        require(amount + balanceOf(msg.sender) > minimumStake, "Amount must be greater than 20K $SHOP");
        require(shopToken.transferFrom(msg.sender, address(this), amount), "Transfer failed");

        _updateStake(msg.sender, amount, true);

        emit Deposited(msg.sender, amount);
    }

    function withdraw(uint256 amount) public {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");

        _updateStake(msg.sender, amount, false);

        require(shopToken.transfer(msg.sender, amount), "Transfer failed");

        emit Withdrawn(msg.sender, amount);
    }

    function claimReward() public {
        require(currentEpoch > 0, "No rewards have been distributed yet");
        uint256 lastSnapshotTime = epochInfo[currentEpoch - 1].timestamp;
        require(lastSnapshotTime + epochDuration < block.timestamp, "Too early to calculate rewards");
        require(!isAutoCompounding[msg.sender], "Auto-compounding is enabled");
        uint256 reward = calculateReward(msg.sender);
        require(reward > 0, "No reward available");
        lastClaimedInEpoch[msg.sender] = currentEpoch;
        payable(msg.sender).transfer(reward);

        emit Claimed(msg.sender, reward);
    }

    function snapshot() public payable nonReentrant {
        uint256 lastSnapshotTime = epochInfo[currentEpoch - 1].timestamp;
        require(block.timestamp >= lastSnapshotTime + epochDuration - 5 minutes, "Too early for a new snapshot");
        require(msg.value > 0, "ETH amount must be greater than 0");
        epochInfo[currentEpoch].rewards = msg.value;
        epochInfo[currentEpoch].timestamp = block.timestamp;
        epochInfo[currentEpoch].totalStaked = totalSupply();
        epochInfo[currentEpoch].shopPrice = _shopPrice;
        currentEpoch++;
        // swap ETH for autocompounding

        emit Snapshot(msg.value, msg.sender, _shopPrice);
    }

    function _updateStake(address user, uint256 amount, bool isDeposit) internal {
        if (isDeposit) {
            deposits[user][currentEpoch] += amount;
            _mint(user, amount);
        } else {
            uint256 remainingAmountToWithdraw = amount;
            for (uint256 i = 0; i <= currentEpoch; i++) {
                if (remainingAmountToWithdraw == 0) {
                    break;
                }
                uint256 amountToWithdraw = deposits[user][i];
                if (amountToWithdraw > remainingAmountToWithdraw) {
                    amountToWithdraw = remainingAmountToWithdraw;
                }
                deposits[user][i] -= amountToWithdraw;
                remainingAmountToWithdraw -= amountToWithdraw;
            }
            _burn(user, amount);
        }
    }


    function calculateReward(address user) public view returns (uint256) {
        uint256 reward = 0;
        uint256 userBalanceInEpoch = 0;
        uint256 xShoptoMint = 0;
        UserInfo userInfo = userInfo[user];
        for (uint256 i = userInfo.lastClaimedEpoch; i < currentEpoch; i++) {
            userBalanceInEpoch += deposits[user][i];
            uint256 epochReward = userBalanceInEpoch * epochInfo[i].rewards / epochInfo[i].totalStaked;
            if (userInfo.isAutoCompoundingOn) {
                xShoptoMint = epochReward * 1e18 / epochInfo[i].shopPrice;
            }
            else
                reward += epochReward;
        }
        return reward;
    }

    function toggleAutoCompounding() public {
        userInfo[msg.sender].isAutoCompoundingOn = !userInfo[msg.sender].isAutoCompoundingOn;
        amountToSwapForSHop = calculateReward(msg.sender);
    }

// Mock function for demonstration purposes. In reality, you'd interact with a decentralized exchange contract here.
    function swapEthForShop(uint256 ethAmount) internal returns (uint256) {
        uint256 shopPrice = 0.000005 ether;  // Replace with actual price from an oracle
        uint256 shopAmount = ethAmount / shopPrice;
        return shopAmount;
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal pure override {
        require(from == address(0) || to == address(0), "Only stake or unstake");
    }


    function rescueETH(uint256 weiAmount) external {
        payable(owner()).transfer(weiAmount);
    }

    function rescueERC20(address tokenAdd, uint256 amount) external {
        IERC20(tokenAdd).transfer(owner(), amount);
    }


}
